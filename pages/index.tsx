import qs from 'qs'
import { GetServerSideProps, NextPage } from 'next'
import { fetchArticles, fetchCategories, fetchUsers } from '../http/Http'
import { IArticle, ICategory, ICollectionResponse, IPropType, IQueryOtions, } from '../types/Types'
import { AxiosResponse } from 'axios'
import Head from 'next/head'
import Tabs from '../components/Tabs'
import ArticlesList from '../components/ArticlesList'
import Pagination from '../components/Pagination'
import { useRouter } from 'next/router'
import { debounce } from '../utils/Utils'

//************************************************************ */

export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  const options: IQueryOtions = {
    populate: ['auther.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 4
    }
  }

  if (query.search) {
    options.filters = {
      Title: {
        $containsi: query.search
      }
    }
  }

  const queryString = qs.stringify(options)
  // console.log('String => ', queryString)

  //To Get Props from Server Side and return Props as object "categories:{item:categories.data}" 
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()
  // console.log('Category => ', categories) // Whole fecth all data in category
  // console.log('Title =>', categories.data[0].attributes.Title) // fetch only Title

  //To Get Props from Server Side and return Props as object "aricles:{item:articles.data}" 
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)
  // console.log(articles)


  return {
    props: {
      categories: {
        items: categories.data
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination
      },
    }
  }
}

//************************************************************ */


const Home: NextPage<IPropType> = ({ categories, articles }) => {
  // console.log('Category => ', categories) // Whole fecth all data in category
  // console.log('User =>', users.items)

  const router = useRouter()

  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`);
    // console.log(`${query}`);
  };

  const { page, pageCount } = articles.pagination

  return (
    <div>
      <Head>
        <title>Coder Blog Next.Js</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/m.png" />
      </Head>

      {/* Category  */}
      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 500)} />

      {/* Articales */}
      <ArticlesList articles={articles.items} />

      {/* Pagination */}
      <Pagination page={page} pageCount={pageCount} />


    </div>
  )
}

export default Home





